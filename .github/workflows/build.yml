name: Build & Test

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  CROSS_DEBUG: 1

on:
  workflow_call:
    inputs:
      ref:
        default: ${{ github.ref }}
        type: string
      run-tests:
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      run-tests:
        description: Run tests
        type: boolean
        default: true
      rust-test-threads:
        description: Number of Rust test threads
        type: string
        default: ""
      include_tier:
        description: "Include tier level, default: 1, range: 1-3"
        type: number

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - id: matrix
        name: Compute matrix
        env:
          include_tier: ${{ inputs.include_tier || ( endsWith(inputs.ref, 'all-tiers') && 10 || 1 ) }}
        run: |
          filter='
              .jobs.matrix.strategy.matrix as $matrix
            | ([$matrix.include[] | select(.tier > ${{ env.include_tier }}) | .platform] | sort | unique) as $exclude
            | {
                "platform": $matrix.platform | map(select(. as $e | $exclude | any_c(. == $e) | not)),
                "include": $matrix.include | map(select(.platform as $e | $exclude | any_c(. == $e) | not))
              }
          '
          echo -n matrix= >> $GITHUB_OUTPUT
          yq -I0 -o json "$filter" .github/workflows/build_matrix.yml >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.platform }} (${{ matrix.target }}) (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }} # Matrix is stored in .github/workflows/build_matrix.yml

    env:
      BUILD_CMD: cargo
      EMSCRIPTEN_VERSION: ""
      EXE: ${{ contains(matrix.target, 'windows') && '.exe' || '' }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Read Emscripten version
        run: |
          echo "EMSCRIPTEN_VERSION=$(cat cli/emscripten-version)" >> $GITHUB_ENV

      - name: Install Emscripten
        if: ${{ !matrix.cli-only && !matrix.use-cross }}
        uses: mymindstorm/setup-emsdk@v12
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          toolchain: ${{ matrix.rust-toolchain || 'stable' }}

      - name: Install cross
        if: ${{ matrix.use-cross }}
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build custom cross image
        if: ${{ matrix.use-cross && matrix.os == 'ubuntu-latest' }}
        run: |
          cd ..

          target="${{ matrix.target }}"
          image=ghcr.io/cross-rs/$target:custom
          echo "CROSS_IMAGE=$image"                              >> $GITHUB_ENV

          echo "[target.$target]"                                >> Cross.toml
          echo "image = \"$image\""                              >> Cross.toml
          echo "CROSS_CONFIG=$PWD/Cross.toml"                    >> $GITHUB_ENV

          echo "FROM ghcr.io/cross-rs/$target:edge"              >> Dockerfile
          echo "ENV DEBIAN_FRONTEND=noninteractive"              >> Dockerfile
          echo "RUN apt-get update && apt-get install -y nodejs" >> Dockerfile
          docker build -t $image .

      - name: Setup env extras
        env:
          RUST_TEST_THREADS: ${{ matrix.rust-test-threads || inputs.rust-test-threads || '' }}
          USE_CROSS: ${{ matrix.use-cross }}
          TARGET: ${{ matrix.target }}
          CC: ${{ matrix.cc }}
          AR: ${{ matrix.ar }}
          IS_WINDOWS: ${{ contains(matrix.os, 'windows') }}
        run: |
          PATH="$PWD/.github/scripts:$PATH"
          echo "$PWD/.github/scripts" >> $GITHUB_PATH

          echo "TREE_SITTER=tree-sitter.sh" >> $GITHUB_ENV
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "ROOT=$PWD" >> $GITHUB_ENV

          [ -n "$RUST_TEST_THREADS" ] && \
          echo "RUST_TEST_THREADS=$RUST_TEST_THREADS" >> $GITHUB_ENV

          [ -n "$CC" ] && echo "CC=$CC" >> $GITHUB_ENV
          [ -n "$AR" ] && echo "AR=$AR" >> $GITHUB_ENV

          [ "$IS_WINDOWS" = "false" ] && echo "CFLAGS=-Werror" >> $GITHUB_ENV

          if [ "$USE_CROSS" == "true" ]; then
            echo "BUILD_CMD=cross" >> $GITHUB_ENV
            runner=$(BUILD_CMD=cross cross.sh bash -c "env | sed -nr '/^CARGO_TARGET_.*_RUNNER=/s///p'")
            [ -n "$runner" ] && echo "CROSS_RUNNER=$runner" >> $GITHUB_ENV
          fi

      - name: Build C library
        if: ${{ !contains(matrix.os, 'windows') }} # Requires an additional adapted Makefile for `cl.exe` compiler
        run: make.sh -j

      - name: Build wasm library
        if: ${{ !matrix.cli-only && !matrix.use-cross }} # No sense to build on the same Github runner hosts many times
        run: script/build-wasm

      - name: Build CLI
        run: $BUILD_CMD build --release --target=${{ matrix.target }}

      - name: Info about CLI
        if: ${{ startsWith(matrix.platform, 'linux') }}
        run: |
          min_glibc=$(objdump -p target/$TARGET/release/tree-sitter${{ env.EXE }} | sed -nr 's/.*(GLIBC_.+).*/\1/p' | sort -uV | tail -n1)
          echo "ðŸ”— Minimal **glibc** version required for CLI: ${min_glibc}">> $GITHUB_STEP_SUMMARY

      - name: Fetch fixtures
        if: ${{ inputs.run-tests && !matrix.cli-only }} # Don't fetch fixtures for only CLI building targets
        run: script/fetch-fixtures

      - name: Generate fixtures
        if: ${{ inputs.run-tests && !matrix.cli-only }} # Can't natively run CLI on Github runner's host
        run: script/generate-fixtures

      - name: Generate WASM fixtures
        if: ${{ inputs.run-tests && !matrix.cli-only && !matrix.use-cross }} # See comment for the "Build wasm library" step
        run: script/generate-fixtures-wasm

      - name: Run main tests
        if: ${{ inputs.run-tests && !matrix.cli-only }} # Can't natively run CLI on Github runner's host
        run: $BUILD_CMD test --target=${{ matrix.target }}

      - name: Run wasm tests
        if: ${{ inputs.run-tests && !matrix.cli-only && !matrix.use-cross }} # See comment for the "Build wasm library" step
        run: script/test-wasm

      - name: Run benchmarks
        if: ${{ inputs.run-tests && !matrix.cli-only && !matrix.use-cross }} # Cross-compiled benchmarks make no sense
        run: $BUILD_CMD bench benchmark -p tree-sitter-cli --target=${{ matrix.target }}

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v3
        with:
          name: tree-sitter.${{ matrix.platform }}
          path: target/${{ matrix.target }}/release/tree-sitter${{ env.EXE }}
          if-no-files-found: error
          retention-days: 7

      - name: Upload WASM artifacts
        if: ${{ matrix.platform == 'linux-x64' }}
        uses: actions/upload-artifact@v3
        with:
          name: tree-sitter.wasm
          path: |
            lib/binding_web/tree-sitter.js
            lib/binding_web/tree-sitter.wasm
          if-no-files-found: error
          retention-days: 7
